---
import "@/styles/globals.css";
import { ClientRouter } from "astro:transitions";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description } = Astro.props;
---

<!--- Global Meta -->
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<link
  rel="icon"
  href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸ¦¦</text></svg>"
/>
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<!-- <meta property="og:image" content={new URL(image, Astro.url)} /> -->

<!-- Twitter -->
<!-- <meta property="twitter:card" content="summary_large_image" /> -->
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<!-- <meta property="twitter:image" content={new URL(image, Astro.url)} /> -->

<!-- Sitemap -->
<link rel="sitemap" href="/sitemap-index.xml" />

<ClientRouter />

<script>
  import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
  document.addEventListener("astro:before-swap", (e) =>
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        'link[as="font"]',
      ),
    ].forEach((link) => link.remove()),
  );
</script>

<script is:inline>
  function init() {
    onScroll();
    animate();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    document.addEventListener("scroll", onScroll);
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 150);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
</script>
<!--- Theme -->
<script is:inline>
  function changeTheme() {
    const element = document.documentElement;
    const theme = element.classList.contains("dark") ? "light" : "dark";

    const css = document.createElement("style");

    css.appendChild(
      document.createTextNode(
        `* {
           -webkit-transition: none !important;
           -moz-transition: none !important;
           -o-transition: none !important;
           -ms-transition: none !important;
           transition: none !important;
        }`,
      ),
    );
    document.head.appendChild(css);

    if (theme === "dark") {
      element.classList.add("dark");
    } else {
      element.classList.remove("dark");
    }

    window.getComputedStyle(css).opacity;
    document.head.removeChild(css);
    localStorage.theme = theme;
  }

  function preloadTheme() {
    const theme = (() => {
      const userTheme = localStorage.theme;

      if (userTheme === "light" || userTheme === "dark") {
        return userTheme;
      } else {
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      }
    })();

    const element = document.documentElement;

    if (theme === "dark") {
      element.classList.add("dark");
    } else {
      element.classList.remove("dark");
    }

    localStorage.theme = theme;
  }

  window.onload = () => {
    function initializeThemeButtons() {
      const headerThemeButton = document.getElementById("header-theme-button");
      const drawerThemeButton = document.getElementById("drawer-theme-button");
      headerThemeButton?.addEventListener("click", changeTheme);
      drawerThemeButton?.addEventListener("click", changeTheme);
    }

    document.addEventListener("astro:after-swap", initializeThemeButtons);
    initializeThemeButtons();
  };

  document.addEventListener("astro:after-swap", preloadTheme);

  preloadTheme();
</script>
